type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/AI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    public class AI implements Player {
        private final Random random = new Random();
        GameBoard gameBoard;

        private boolean firstPlayer = false;

        private int level = 1;
        private int smartLevelCounter = 0;

        public AI(GameBoard gameBoard) {
            this.gameBoard = gameBoard;
        }

        @Override
        public void play() {
            switch (level) {
                case 2:
                    Message.MAKING_MOVE_M.print();
                    mediumLevel();
                    break;
                case 3:
                    Message.MAKING_MOVE_H.print();
                    hardLevel();
                    break;
                default:
                    Message.MAKING_MOVE.print();
                    easyLevel();
            }
        }

        private void easyLevel() {
            boolean played;
            do {
                int aiX = random.nextInt(3) + 1;
                int aiY = random.nextInt(3) + 1;
                var state = gameBoard.move(aiX, aiY, firstPlayer);
                played = state == CellState.DONE;
            } while (!played);
        }

        private void mediumLevel() {
            boolean isCellFree;
            Infos gameState;
            boolean wined = false;
            boolean bocked = false;
            int xBlock = 0;
            int yBlock = 0;

            GameState toWin = firstPlayer ? GameState.X_WIN : GameState.O_WIN;
            GameState toLoose = !firstPlayer ? GameState.X_WIN : GameState.O_WIN;
            for (int i = 1; i < 4; i++) {
                for (int j = 1; j < 4; j++) {
                    isCellFree = gameBoard.isCellFree(i, j);
                    if (isCellFree) {
                        gameBoard.move(i, j, firstPlayer);
                        gameState = gameBoard.checkState();
                        if (gameState == toWin || gameState == GameState.DRAW) {
                            wined = true;
                        } else {
                            gameBoard.remove(i, j);
                            gameBoard.move(i, j, !firstPlayer);
                            gameState = gameBoard.checkState();
                            if (gameState == toLoose) {
                                gameBoard.remove(i, j);
                                xBlock = i;
                                yBlock = j;
                                bocked = true;
                            } else {
                                gameBoard.remove(i, j);
                            }
                        }
                    }
                    if (wined) break;
                }
                if (wined) break;
            }
            if (!wined) {
                if (bocked) {
                    gameBoard.move(xBlock, yBlock, firstPlayer);
                } else easyLevel();
            }
        }

        private void hardLevel() {

        }

        @Override
        public void setLevel(int level) {
            this.level = level;
        }

        @Override
        public void setFirstPlayer(boolean firstPlayer) {
            this.firstPlayer = firstPlayer;
        }

    }
  learner_created: true
- name: src/tictactoe/GameBoard.java
  visible: true
  text: |-
    package tictactoe;


    public class GameBoard {
        private final char[][] board = new char[][]{{'_', '_', '_'}, {'_', '_', '_'}, {'_', '_', '_'}};
        private int moveCount = 9;

        public GameBoard() {}

        public Infos move(int x, int y, boolean isPlayer1) {
            boolean isCellFree = isCellFree(x, y);
            if (isCellFree) {
                if (isPlayer1) board[--x][--y] = 'X';
                else board[--x][--y] = 'O';
                moveCount--;
                return CellState.DONE;
            }
            return CellState.OCCUPIED;
        }

        public Infos checkState() {
            GameState gameState = GameState.GAME_NOT_FINISHED;

            for (int i = 0; i < 3; i++) {
                String row = "" + board[i][0] + board[i][1] + board[i][2];
                String col = "" + board[0][i] + board[1][i] + board[2][i];

                if (row.equals("XXX") || col.equals("XXX")) gameState = GameState.X_WIN;
                if (row.equals("OOO") || col.equals("OOO")) gameState = GameState.O_WIN;
            }
            var diag1 = "" + board[0][0] + board[1][1] + board[2][2];
            var diag2 = "" + board[2][0] + board[1][1] + board[0][2];

            if (diag1.equals("XXX") || diag2.equals("XXX")) gameState = GameState.X_WIN;
            if (diag1.equals("OOO") || diag2.equals("OOO")) gameState = GameState.O_WIN;
            if (moveCount <= 0) gameState = GameState.DRAW;
            return gameState;
        }

        public boolean isCellFree(int x, int y) {
            return board[--x][--y] == '_';
        }

        public void remove(int x, int y) {
            board[--x][--y] = '_';
            moveCount ++;
        }

        public void printState() {
            System.out.println("---------");
            System.out.println("| " + board[0][0] + " " + board[0][1] + " " + board[0][2] + " |");
            System.out.println("| " + board[1][0] + " " + board[1][1] + " " + board[1][2] + " |");
            System.out.println("| " + board[2][0] + " " + board[2][1] + " " + board[2][2] + " |");
            System.out.println("---------");
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    interface Player {
        void play();

        void setFirstPlayer(boolean firstPlayer);

        void setLevel(int level);
    }
    interface Infos {
        void print();
    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Scanner;

    public class Game {
        private final Scanner scanner = new Scanner(System.in);
        private GameBoard gameBoard;
        private Player firstPlayer;
        private Player secondPlayer;

        public Game() {}

        void start() {
            readCommands();
        }

        private void readCommands() {
            boolean exit = false;
            do {
                gameBoard = new GameBoard();
                Message.INPUT_COMMAND.print();
                try {
                    var commands = scanner.nextLine().split(" ");
                    switch (commands[0]) {
                        case "start":
                            firstPlayer = switcher(commands[1]);
                            firstPlayer.setFirstPlayer(true);
                            secondPlayer = switcher(commands[2]);
                            secondPlayer.setFirstPlayer(false);
                            startGame();
                            break;
                        case "exit":
                            exit = true;
                            break;
                        default:
                            throw new IllegalArgumentException();
                    }

                } catch (Exception e) {
                    Message.BAD_PARAMS.print();
                }
            } while (!exit);
        }

        private void startGame() {
            boolean playFirst = true;
            gameBoard.printState();
            Infos gameState;
            do {
                if (playFirst) firstPlayer.play();
                else secondPlayer.play();
                gameBoard.printState();
                gameState = gameBoard.checkState();
                playFirst = !playFirst;

            } while (gameState == GameState.GAME_NOT_FINISHED);
            gameState.print();
        }

        private Player switcher(String command) {
            Player player;
            switch (command) {
                case "user":
                    player = new User(gameBoard);
                    break;
                case "easy":
                    player = new AI(gameBoard);
                    break;
                case "medium":
                    player = new AI(gameBoard);
                    player.setLevel(2);
                    break;
                case "hard":
                    player = new AI(gameBoard);
                    player.setLevel(3);
                    break;
                default:
                    throw new IllegalArgumentException();
            }
            return player;
        }
    }
  learner_created: true
- name: src/tictactoe/User.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class User implements Player{
        private boolean firstPlayer = false;
        private final Scanner scanner = new Scanner(System.in);
        GameBoard gameBoard;
        public User(GameBoard gameBoard) {
            this.gameBoard = gameBoard;
        }

        @Override
        public void play() {
            boolean played;
            do {
                Message.ENTER_COORDINATES.print();
                Infos state = userMove();
                played = state == CellState.DONE;
                if (!played) state.print();
            } while (!played);
        }

        private Infos userMove() {
            String coordinates = scanner.nextLine();
            int xCoordinates;
            int yCoordinates;
            try {
                xCoordinates = Integer.parseInt(coordinates.split(" ")[0]);
                yCoordinates = Integer.parseInt(coordinates.split(" ")[1]);
            } catch (Exception e) {
                return Message.INVALID_DIGIT;
            }
            if (xCoordinates > 3 || yCoordinates > 3 || xCoordinates < 1 || yCoordinates < 1)
                return Message.OUT_OF_BOUND;

            return gameBoard.move(xCoordinates, yCoordinates, firstPlayer);
        }

        @Override
        public void setFirstPlayer(boolean firstPlayer) {
            this.firstPlayer = firstPlayer;
        }

        @Override
        public void setLevel(int level) {
    //        User don't set level
        }
    }
  learner_created: true
- name: src/tictactoe/Utils.java
  visible: true
  text: |
    /*
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Utils {
        public static void main(String[] args) {
            // write your code here
            Scanner scanner = new Scanner(System.in);
            char[][] grid = new char[][]{{'_', '_', '_'}, {'_', '_', '_'}, {'_', '_', '_'}};

            print(grid);
            String move;
            String state;
            int isDraw = 9;
            boolean isPlayer1 =true;
            Random random = new Random();
            do {
                do {
                    int aiX = random.nextInt(3) + 1 ;
                    int aiY = random.nextInt(3) + 1;
                    var coordinates = aiX + " " + aiY;
                    if (isPlayer1) {
                        System.out.print("Enter the coordinates: ");
                        coordinates =  scanner.nextLine();
                    }
                    move = move(grid, coordinates, isPlayer1);
                    if (move != null && isPlayer1) System.out.println(move);
                } while (move != null);

                state = checkState(grid);
                if (!isPlayer1) {
                    System.out.println("Making move level \"easy\"");
                }
                print(grid);

                isDraw--;
                isPlayer1 = !isPlayer1;

            } while (state == null && isDraw > 0);

            if (state != null) {
                System.out.println(state + " wins");
            } else System.out.println("Draw");

        }

        static String move(char[][] arr, String coordinates, boolean isPlayer1) {
            int col;
            int row;

            try {
                col = Integer.parseInt(coordinates.split(" ")[0]);
                row = Integer.parseInt(coordinates.split(" ")[1]);
            } catch (Exception e) {
                return "You should enter numbers!";
            }
            if (col > 3 || row > 3 || col < 1 || row < 1)
                return "Coordinates should be from 1 to 3!";
            if (arr[--col][--row] == '_') {
                if (isPlayer1) arr[col][row] = 'X';
                else arr[col][row] = 'O';
                return null;
            }
            return "This cell is occupied! Choose another one!";
        }

        static String checkState(char[][] grid) {
            String winner = null;

            for (int i = 0; i < 3; i++) {
                String row = "" + grid[i][0] + grid[i][1] + grid[i][2];
                String col = "" + grid[0][i] + grid[1][i] + grid[2][i];

                if (row.equals("XXX") || col.equals("XXX")) winner = "X";
                if (row.equals("OOO") || col.equals("OOO")) winner = "O";
            }
            var diag1 = "" + grid[0][0] + grid[1][1] + grid[2][2];
            var diag2 = "" + grid[2][0] + grid[1][1] + grid[0][2];

            if (diag1.equals("XXX") || diag2.equals("XXX")) winner = "X";
            if (diag1.equals("OOO") || diag2.equals("OOO")) winner = "O";
            return winner;
        }

        static void print(char[][] input) {
            System.out.println("---------");
            System.out.println("| " + input[0][0] + " " + input[0][1] + " " + input[0][2] + " |");
            System.out.println("| " + input[1][0] + " " + input[1][1] + " " + input[1][2] + " |");
            System.out.println("| " + input[2][0] + " " + input[2][1] + " " + input[2][2] + " |");
            System.out.println("---------");
        }
    }
    */
  learner_created: true
- name: src/tictactoe/Constants.java
  visible: true
  text: |
    package tictactoe;

    enum Message implements Infos {
        INVALID_DIGIT("You should enter numbers!"),
        OUT_OF_BOUND("Coordinates should be from 1 to 3!"),
        ENTER_COORDINATES("Enter the coordinates:"),
        INPUT_COMMAND("Input command:"),
        BAD_PARAMS("Bad parameters!"),
        MAKING_MOVE("Making move level \"easy\""),
        MAKING_MOVE_M("Making move level \"medium\""),
        MAKING_MOVE_H("Making move level \"hard\"");
        String message;

        Message(String message) {
            this.message = message;
        }

        @Override
        public void print() {
            System.out.println(message);
        }
    }

    enum GameState implements Infos {
        X_WIN("X wins"), O_WIN("O wins"), DRAW("Draw"),
        GAME_NOT_FINISHED("Game not finished");

        private final String state;

        GameState(String state) {
            this.state = state;
        }

        public void print() {
            System.out.println(state);
        }
    }

    enum CellState implements Infos {
        OCCUPIED("This cell is occupied! Choose another one!"),
        DONE("This cell is Empty, can make move");
        String cellState;
        CellState(String cellState) {
            this.cellState = cellState;
        }
        @Override
        public void print() {
            System.out.println(cellState);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement#comment
status: Unchecked
record: -1
